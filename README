##################################
#word_frequency.py
word_frequency.py is a module that generates a histogram of word frequencies 
in a given document.

word_frequency.py can be run as a program that takes in a single argument,
a text file to parse, and outputs a list of words found and their frequencies

usage:
python word_frequency.py sampletext.txt

Contains the following classes (documented in the module):
SafeCount()
Histogram()

These classes are integrated into word_histogram:

###################################
#word_histogram.py
word_histogram.py is program which takes in the names of input files 
line-by-line, each followed by a *SINGLE NEWLINE* and performs a 
cumulative threaded word frequency diagram. 
(this single newline is important - it interprets a double newline as an EOF)

usage:
python word_histogram.py -o outputfile.txt -m 100 < list_of_files.txt

where list_of_files.txt looks like:
file1.txt
file2.txt

word_histogram.py
Contains the following classes:
SafeList()
SafeLimitedList()
SafeJobQueue()

High-Level Design Overview:


The main() thread acts as a producer, parsing the input line by line. After
getting a line, it pushes a work order to the queue asking the consumer threads
to take a filename and turn it into a histogram with a "FILENAME" work order. 

as main is a producer, it spawns n-1 threads running thread_runtime.

Within thread_runtime, a thread can grab one of two work orders:

FILENAME:
    After main pushes a filename to the job queue, a thread in this stage 
    will pop that name off, and generate a per-file histogram from it. 
    It pushes this histogram as a HISTOGRAM job to the work_queue, and then 
    prints it, allowing another thread to get started merging it while
    it prints it to stdout.

HISTOGRAM:
    A thread that gets a HISTOGRAM job absorbs it into the global histogram. 

HEY_STOP_IT_YOU:
    A special signal added to the back of the queue by main() when it has 
    determined that there are no more filenames to be added. A thread that gets 
    this signal puts it back on the queue and then returns, killing the thread.

This repository includes related basic unit tests, which can be run as:
python word_frequency_testing.py
